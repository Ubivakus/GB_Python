# 1. Написать функцию num_translate(), переводящую числительные от 0 до 10 c английского на русский язык. Например:
# >>> num_translate("one")
# "один"
# >>> num_translate("eight")
# "восемь"
# Если перевод сделать невозможно, вернуть None. 
# Подумайте, как и где лучше хранить информацию, необходимую для перевода: какой тип данных выбрать, в теле функции или снаружи.


# def num_translate(num):     
#     if num in numbers_en:        
#         print(f'"{number}" in Russian is "{numbers_ru[numbers_en.index(num)]}".')
#     else:
#         print('None')


# numbers_en = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]
# numbers_ru = ["ноль", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять"]
# number = input("Enter number to print from 0 to 10 in English: ")
# num_translate(number)



# 2. * (вместо задачи 1) Доработать предыдущую функцию в num_translate_adv():
#  реализовать корректную работу с числительными, начинающимися с заглавной буквы — результат тоже должен быть с заглавной. 
#  Например:
# >>> num_translate_adv("One")
# "Один"
# >>> num_translate_adv("two")
# "два"


# def num_translate_adv(num):     
#     if num.lower() in numbers_en:
#         if num[:1].isupper():
#             print(f'"{num}" in Russian is "{numbers_ru[numbers_en.index(num.lower())].capitalize()}".')
#         else:
#             print(f'"{num}" in Russian is "{numbers_ru[numbers_en.index(num)]}".')    
#     else:
#         print('None')


# numbers_en = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]
# numbers_ru = ["ноль", "один", "два", "три", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять"]

# number = input("Enter number to print from 0 to 10 in English: ")

# num_translate_adv(number)




# 3. Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь, 
# в котором ключи — первые буквы имён, а значения — списки, содержащие имена, начинающиеся с соответствующей буквы. 
# Например:
# >>>  thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": ["Иван", "Илья"], 
#     "М": ["Мария"], "П": ["Петр"]
# }
# Подумайте: полезен ли будет вам оператор распаковки? 
# Как поступить, если потребуется сортировка по ключам? 
# Можно ли использовать словарь в этом случае?


# def thesaurus(*names):
#     res = {}
#     for name in names:
#         key = name[0].capitalize()
#         if key not in res:
#             res[key] = []
#         res[key].append(name)
#     return res

# print(thesaurus("Иван", "Мария", "Петр", "Илья"))



# 4. * (вместо задачи 3) Написать функцию thesaurus_adv(), 
# принимающую в качестве аргументов строки в формате «Имя Фамилия» и возвращающую словарь, 
# в котором ключи — первые буквы фамилий, а значения — словари, реализованные по схеме предыдущего задания и содержащие записи, 
# в которых фамилия начинается с соответствующей буквы. 
# Например:
# >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": ["Петр Алексеев"]
#     },
#     "И": {
#         "И": ["Илья Иванов"]
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"], 
#         "А": ["Анна Савельева"]
#     }
# }
# Как поступить, если потребуется сортировка по ключам?